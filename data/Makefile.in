# -- LICENSE BEGIN --
#
# Copyright (c) 2015-2018, Lawrence Livermore National Security, LLC.
#
# Produced at the Lawrence Livermore National Laboratory
#
# Written by
#   Michael Bentley (mikebentley15@gmail.com),
#   Geof Sawaya (fredricflinstone@gmail.com),
#   and Ian Briggs (ian.briggs@utah.edu)
# under the direction of
#   Ganesh Gopalakrishnan
#   and Dong H. Ahn.
#
# LLNL-CODE-743137
#
# All rights reserved.
#
# This file is part of FLiT. For details, see
#   https://pruners.github.io/flit
# Please also read
#   https://github.com/PRUNERS/FLiT/blob/master/LICENSE
#
# Redistribution and use in source and binary forms, with or
# without modification, are permitted provided that the following
# conditions are met:
#
# - Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the disclaimer below.
#
# - Redistributions in binary form must reproduce the above
#   copyright notice, this list of conditions and the disclaimer
#   (as noted below) in the documentation and/or other materials
#   provided with the distribution.
#
# - Neither the name of the LLNS/LLNL nor the names of its
#   contributors may be used to endorse or promote products derived
#   from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL LAWRENCE LIVERMORE NATIONAL
# SECURITY, LLC, THE U.S. DEPARTMENT OF ENERGY OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
# TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
# THE POSSIBILITY OF SUCH DAMAGE.
#
# Additional BSD Notice
#
# 1. This notice is required to be provided under our contract
#    with the U.S. Department of Energy (DOE). This work was
#    produced at Lawrence Livermore National Laboratory under
#    Contract No. DE-AC52-07NA27344 with the DOE.
#
# 2. Neither the United States Government nor Lawrence Livermore
#    National Security, LLC nor any of their employees, makes any
#    warranty, express or implied, or assumes any liability or
#    responsibility for the accuracy, completeness, or usefulness of
#    any information, apparatus, product, or process disclosed, or
#    represents that its use would not infringe privately-owned
#    rights.
#
# 3. Also, reference herein to any specific commercial products,
#    process, or services by trade name, trademark, manufacturer or
#    otherwise does not necessarily constitute or imply its
#    endorsement, recommendation, or favoring by the United States
#    Government or Lawrence Livermore National Security, LLC. The
#    views and opinions of authors expressed herein do not
#    necessarily state or reflect those of the United States
#    Government or Lawrence Livermore National Security, LLC, and
#    shall not be used for advertising or product endorsement
#    purposes.
#
# -- LICENSE END --
# Autogenerated Makefile using "flit update"
#   flit version {flit_version}

FFLAGS          ?=
DEV_TARGET      ?= devrun
GT_TARGET       ?= gtrun
GT_OUT          := ground-truth.csv

UNAME_S         := {uname}

# will be None if not specified in flit-config.toml
{compiler_defs}

# keep only the compilers that are not None and are in the path
COMPILERS       := {compilers}

# Compiler Colections
# 
# E.G. if GCC was the collection
#
# GCC_CXX = g++
# GCC_FXX = gfortran

{collection_defs}

COLLECTIONS     := {collections}

FLIT_INC_DIR    := {flit_include_dir}
FLIT_LIB_DIR    := {flit_lib_dir}
FLIT_DATA_DIR   := {flit_data_dir}
FLIT_SCRIPT_DIR := {flit_script_dir}

DEV_COLLECTION  ?= {dev_collection}
DEV_CXX         ?= $($($(DEV_COLLECTION)_CXX))
DEV_CXX_TYPE    ?= $($($(DEV_COLLECTION)_CXX)_TYPE)
DEV_OPTL        ?= {dev_optl}
DEV_SWITCHES    ?= {dev_switches}

GT_COLLECTION   := {ground_truth_collection}
GT_CXX          := $($($(GT_COLLECTION)_CXX))
GT_CXX_TYPE     := $($($(DEV_COLLECTION)_CXX)_TYPE)
GT_OPTL         := {ground_truth_optl}
GT_SWITCHES     := {ground_truth_switches}

TEST_RUN_ARGS   := {test_run_args}

ENABLE_MPI      := {enable_mpi}
MPIRUN_ARGS     := {mpirun_args}

# initalize some variables to be appended later
CC_REQUIRED     :=
F_REQUIRED      :=
F_FIX_REQUIRED  :=
DEV_CFLAGS      :=
LD_REQUIRED     :=

RUNWRAP          = $(RUN_WRAPPER)
ifeq ($(ENABLE_MPI),yes) # If we are using MPI
  RUNWRAP       += mpirun $(MPIRUN_ARGS)
  CC_REQUIRED   += -DFLIT_USE_MPI
  CC_REQUIRED   += $(shell mpic++ --showme:compile)
  LD_REQUIRED   += $(shell mpic++ --showme:link)
endif

OBJ_DIR         := obj

CC_REQUIRED     += $(FFLAGS)
# This flag specifies NOT to build position-independent executables
CC_REQUIRED     += -fno-pie
CC_REQUIRED     += -std=c++11
CC_REQUIRED     += -I.
CC_REQUIRED     += -I$(FLIT_INC_DIR)

F_REQUIRED      += -cpp

DEV_CFLAGS      += -g
DEV_CFLAGS      += -Wall
DEV_CFLAGS      += -Wextra
DEV_CFLAGS      += -Wuninitialized
DEV_CFLAGS      += -Wno-shift-count-overflow

# This flag specifies NOT to link as a position-independent executable
# Note: this flag does not exist in GCC 4 or GCC 5 so it will fail to compile
#       we need extra logic to check for this and conditionally add this flag
#LD_REQUIRED     += -no-pie
LD_REQUIRED     += -lm
LD_REQUIRED     += -lstdc++
ifeq ($(UNAME_S),Darwin) # If we are on a Mac OSX system
  LD_REQUIRED   += -Llib -lflit
else
  LD_REQUIRED   += -L$(FLIT_LIB_DIR) -lflit
  LD_REQUIRED   += -Wl,-rpath=$(realpath $(FLIT_LIB_DIR))
endif

# Helper functions to determine if the compiler is a particular version of GCC

# Returns the compiler name as output by the --version flag
# @param 1: executable name or path to compiler
GET_COMPILER     = $(shell $1 --version | head -n 1 | awk '{{ print $$1 }}')

# Returns the version of the compiler as returned by -dumpversion
# @param 1: executable name or path to compiler
GET_COMPILER_VER = $(shell $1 -dumpversion)

# Returns 1 if the major version matches else 0
# @param 1: executable name or path to compiler
# @param 2: major version number as an integer
IS_MAJOR_VER     = $(shell expr substr $(call GET_COMPILER_VER,$1) 1 1 = $2)

# Returns 1 if the compiler is GCC version 4 or version 5
# @param 1: executable name or path to compiler
IS_VER_4_OR_5    = $(shell expr $(call IS_MAJOR_VER,$1,4) \| \
                                $(call IS_MAJOR_VER,$1,5))

DEV_LDFLAGS      =
GT_LDFLAGS       =

DEPFLAGS        += -MMD -MP -MF $(patsubst %.o,%.d,$@)

TESTS            = $(wildcard tests/*.cpp)
SOURCE           = $(wildcard *.cpp)
SOURCE          += $(TESTS)
F_SOURCE         = $(wildcard *.f90)

VPATH            = $(dir $(SOURCE))
VPATH           += $(dir $(F_SOURCE))

.PHONY: help
help:
	@echo 'You can run the Makefile directly, but it is recommended to use'
	@echo
	@echo '  flit make'
	@echo
	@echo 'so that you can have functionality such as adding the results to a'
	@echo 'database.'
	@echo
	@echo 'The following targets are available:'
	@echo
	@echo '  help        Show this help and exit (default target)'
	@echo '  dev         Only run the devel compilation to test things out'
	@echo '  groundtruth Compile the ground-truth version'
	@echo '  gt          Same as groundtruth'
	@echo '  runbuild    Build all executables needed for the run target'
	@echo '  run         Run all combinations of compilation, results in results/'
	@echo '  clean       Clean intermediate files'
	@echo '  veryclean   Runs clean + removes targets and results'
	@echo '  distclean   Same as veryclean'
	@echo

# Note: having this include at the end breaks the makefile for when users add
# to SOURCE from custom.mk
-include custom.mk

# We are done adding to VPATH, so consolidate it for speed (removing duplicates)
VPATH           := $(sort $(VPATH))

DEV_OBJ          = $(addprefix $(OBJ_DIR)/,$(notdir $(SOURCE:%.cpp=%_dev.o)))
DEV_OBJ          += $(addprefix $(OBJ_DIR)/,$(addsuffix _dev.o, $(basename $(notdir $(F_SOURCE)))))
DEV_DEPS         = $(DEV_OBJ:%.o=%.d)
GT_OBJ           = $(addprefix $(OBJ_DIR)/,$(notdir $(SOURCE:%.cpp=%_gt.o)))
GT_OBJ          += $(addprefix $(OBJ_DIR)/,$(addsuffix _gt.o, $(basename $(notdir $(F_SOURCE)))))
GT_DEPS          = $(GT_OBJ:%.o=%.d)
GT_OBJ_FPIC      = $(GT_OBJ:%.o=%_fPIC.o)

HOSTNAME        := {hostname}

RESULTS_DIR     := results

# on systems with non-standard gcc installations (such as module), clang may
# be unable to determine the correct gcc toolchain
CLANG_REQUIRED  :=
ifeq ($(findstring GCC,$(COMPILERS)),GCC)
GCC_TOOLCHAIN   := $(dir $(shell which $(GCC) 2>/dev/null))/..
CLANG_REQUIRED  += --gcc-toolchain=$(GCC_TOOLCHAIN)
endif

# Required flags, LD flags, and Types are kept track of
#             on a per compiler basis

{compiler_required_flags}

{compiler_ld_flags}

{compiler_types}

# Compiler setting targets
#   taken from: https://gcc.gnu.org/onlinedocs/gcc/Optimize-Options.html
#   among other places
# more comp settings, taken from here:
# https://software.intel.com/sites/default/files/article/326703/fp-control-2012-08.pdf

# individual flags

## optls

{opcodes_definitions}

## switches

{switches_definitions}

{compiler_opcodes}

{compiler_switches}

##########################################################
#
# Now to define the recursion for speed and memory reasons
#
##########################################################

# will be set internally when doing recursive calls.  Get set to variable names
# containing the information (e.g. R_CUR_COMPILER=CLANG)
R_CUR_COLLECTION  ?=
R_CUR_OPTL      ?=
R_CUR_SWITCHES  ?=

# If we are in a recursion
ifdef R_IS_RECURSED

R_ID            := $(R_CUR_COLLECTION)_$(HOSTNAME)_$(R_CUR_SWITCHES)_$(R_CUR_OPTL)
R_TARGET        := $(RESULTS_DIR)/$(R_ID)
R_OBJ           := $(addprefix $(OBJ_DIR)/,$(notdir $(SOURCE:%.cpp=%_$(R_ID).o)))
# this may exclude source files with a dot in their name...
R_OBJ           += $(addprefix $(OBJ_DIR)/,$(addsuffix _$(R_ID).o, $(basename $(notdir $(F_SOURCE)))))
R_DEP           := $(R_OBJ:%.o=%.d)

R_CUR_CXX       := $($(R_CUR_COLLECTION)_CXX)
R_CUR_FXX       := $($(R_CUR_COLLECTION)_FXX)

-include $(R_DEP)

.PHONY: rec
rec: $(R_TARGET)

# clang's flag is -nopie
# else if the current compiler is not GCC 4 or 5, then enable -no-pie
# GCC 4 and 5 do not need -no-pie since that is the default
ifeq ($($(R_CUR_CXX)_TYPE),clang)
  LD_REQUIRED += -nopie
else ifeq ($($(R_CUR_CXX)_TYPE), gcc)
ifeq ($(call IS_VER_4_OR_5,$($(R_CUR_CXX))),0)
  LD_REQUIRED += -no-pie
endif
endif

$(R_TARGET): $(R_OBJ)
	$($(R_CUR_CXX)) $($(R_CUR_OPTL)) $($(R_CUR_SWITCHES)) \
	  $($(R_CUR_CXX)_REQUIRED) $(CC_REQUIRED) \
	  $(R_OBJ) -o $@ \
	  $(LD_REQUIRED) $($(R_CUR_CXX)_LD_REQUIRED)

$(OBJ_DIR)/%_$(R_ID).o: %.cpp Makefile custom.mk | $(OBJ_DIR)
	$($(R_CUR_CXX)) $($(R_CUR_OPTL)) $($(R_CUR_SWITCHES)) \
	  -c $($(R_CUR_CXX)_REQUIRED) $(CC_REQUIRED) \
	  $< -o $@ \
	  $(DEPFLAGS) \
	  -DFLIT_HOST='"$(HOSTNAME)"' \
	  -DFLIT_COMPILER='"$($(R_CUR_CXX))"' \
	  -DFLIT_OPTL='"$($(R_CUR_OPTL))"' \
	  -DFLIT_SWITCHES='"$($(R_CUR_SWITCHES))"' \
	  -DFLIT_FILENAME='"$(R_ID)"'

# FORTRAN copy of the previous cpp rule
$(OBJ_DIR)/%_$(R_ID).o: %.f90 Makefile custom.mk | $(OBJ_DIR)
	$($(R_CUR_FXX)) $($(R_CUR_OPTL)) $($(R_CUR_SWITCHES)) \
	  -c $($(R_CUR_FXX)_REQUIRED) $(F_REQUIRED) \
	  $< -o $@ \
	  $(DEPFLAGS) \
	  -DFLIT_HOST='"$(HOSTNAME)"' \
	  -DFLIT_COMPILER='"$($(R_CUR_FXX))"' \
	  -DFLIT_OPTL='"$($(R_CUR_OPTL))"' \
	  -DFLIT_SWITCHES='"$($(R_CUR_SWITCHES))"' \
	  -DFLIT_FILENAME='"$(R_ID)"'

# Fixed Form FORTRAN copy
$(OBJ_DIR)/%_$(R_ID).o: %.F90 Makefile custom.mk | $(OBJ_DIR)
	$($(R_CUR_FXX)) $($(R_CUR_OPTL)) $($(R_CUR_SWITCHES)) \
	  -c $($(R_CUR_FXX)_REQUIRED) $(F_FIX_REQUIRED) \
	  $< -o $@ \
	  $(DEPFLAGS) \
	  -DFLIT_HOST='"$(HOSTNAME)"' \
	  -DFLIT_COMPILER='"$($(R_CUR_FXX))"' \
	  -DFLIT_OPTL='"$($(R_CUR_OPTL))"' \
	  -DFLIT_SWITCHES='"$($(R_CUR_SWITCHES))"' \
	  -DFLIT_FILENAME='"$(R_ID)"'
# Otherwise, we're not in a recursion.
else # ifndef R_IS_RECURSED

# clang's flag is -nopie
# else if the current compiler is not GCC 4 or 5, then enable -no-pie
# GCC 4 and 5 do not need -no-pie since that is the default
ifeq ($(DEV_CXX_TYPE),clang)
  DEV_LDFLAGS   += -nopie
else ifeq ($(DEV_CXX_TYPE), gcc)
ifeq ($(call IS_VER_4_OR_5,$(DEV_CXX)),0)
  DEV_LDFLAGS   += -no-pie
endif
endif

# same for the gt compiler
ifeq ($(GT_CXX_TYPE),clang)
  GT_LDFLAGS    += -nopie
else ifeq ($(GT_CXX_TYPE), gcc)
ifeq ($(call IS_VER_4_OR_5,$(GT_CXX)),0)
  GT_LDFLAGS    += -no-pie
endif
endif

$(OBJ_DIR):
	mkdir -p $(OBJ_DIR)
$(RESULTS_DIR):
	mkdir -p $(RESULTS_DIR)

#
# Define the recursion rules
#

# Set these as empty "simply-expanded variables".  This affects the "+=" operator.
# see https://ftp.gnu.org/old-gnu/Manuals/make-3.79.1/html_chapter/make_6.html
TARGET_OUTS :=

# @param 1: compiler variable name (e.g. CLANG)
# @param 2: optimization level variable name (e.g. O2)
# @param 3: switches variable name (e.g. USE_FAST_MATH)
define RECURSION_RULE
TARGETS     += $$(RESULTS_DIR)/$(strip $1)_$$(HOSTNAME)_$(strip $3)_$(strip $2)

# TODO: use the variable $$(MAKECMDGOALS) to get the original make target
# TODO- or see if it is even necessary

# Make the recursive target depend on $$(GT_TARGET), not because it actually
# depends on that target, but we know that when $$(GT_TARGET) needs to be
# rebuilt, so does each recursive target.

$$(RESULTS_DIR)/$(strip $1)_$$(HOSTNAME)_$(strip $3)_$(strip $2): $$(GT_TARGET) | $$(OBJ_DIR) $$(RESULTS_DIR)
	-$$(MAKE) rec \
	  R_IS_RECURSED=True \
	  R_CUR_COLLECTION=$(strip $1) \
	  R_CUR_OPTL=$(strip $2) \
	  R_CUR_SWITCHES=$(strip $3)
	-test -f $$(RESULTS_DIR)/$(strip $1)_$$(HOSTNAME)_$(strip $3)_$(strip $2)

endef

$(foreach c, $(COLLECTIONS),                 \
  $(foreach s, $(SWITCHES_$(strip $($(c)_CXX))),    \
    $(foreach o, $(OPCODES_$(strip $($(c)_CXX))),               \
      $(eval $(call RECURSION_RULE, $c, $o, $s)))))
TARGET_OUTS     := $(TARGETS:%=%-out)
TARGET_RESULTS  := $(TARGET_OUTS:%=%-comparison.csv)

%-out: %
	$(RUNWRAP) ./$< $(TEST_RUN_ARGS) --output $@ || touch $@

# specify how to get comparison
%-out-comparison.csv: %-out $(GT_OUT) $(GT_TARGET)
	$(RUNWRAP) ./$(GT_TARGET) --compare-mode --compare-gt $(GT_OUT) --suffix "-comparison.csv" $< -o /dev/null
#$(RESULTS_DIR)/%_out.csv: $(RESULTS_DIR)/%
#	$< --output $@

#
# Define the recursion rules
#

OBJ_CLEAN        = $(addprefix $(OBJ_DIR)/,$(notdir $(SOURCE:%.cpp=%_*.o)))
DEP_CLEAN       += $(OBJ_CLEAN:%.o=%.d)

.PHONY: dev gt gt-fpic groundtruth run runbuild
dev: $(DEV_TARGET)
gt: groundtruth
gt-fpic: $(GT_OBJ_FPIC)
groundtruth: $(GT_TARGET)

run: $(TARGET_RESULTS) $(TARGET_OUTS)
run: $(GT_OUT)
run: runbuild
runbuild: $(TARGETS) groundtruth

.PHONY: clean
clean:
	@# Here we do it this way because we were running into the error of too many
	@# arguments given to rm.
	$(foreach obj,$(OBJ_CLEAN),rm -f $(obj);)
	$(foreach obj,$(DEP_CLEAN),rm -f $(obj);)
	-rmdir $(OBJ_DIR)

.PHONY: veryclean distclean
veryclean: distclean
distclean: clean
	rm -f $(DEV_TARGET)
	rm -f $(TARGET_OUTS)
	rm -f $(TARGET_RESULTS)
	rm -f $(addsuffix *.dat,$(TARGET_OUTS))
	rm -f $(TARGETS)
	rm -f $(GT_TARGET)
	rm -f $(GT_OUT)
	rm -f $(addsuffix *.dat,$(GT_OUT))
	-rmdir $(RESULTS_DIR)

Makefile: flit-config.toml
Makefile: $(FLIT_DATA_DIR)/Makefile.in
Makefile: $(FLIT_SCRIPT_DIR)/flitconfig.py
Makefile: $(FLIT_SCRIPT_DIR)/flitutil.py
Makefile: $(FLIT_SCRIPT_DIR)/flit_update.py
	$(FLIT_SCRIPT_DIR)/flit.py update


# We have a different solution if we are on a mac
ifeq ($(UNAME_S),Darwin)
lib/libflit.so: $(FLIT_LIB_DIR)/libflit.so
	mkdir -p lib
	cp $< $@

.PHONY: cleanlibflit
distclean: cleanlibflit
cleanlibflit:
	rm -rf lib

$(DEV_TARGET): lib/libflit.so
$(GT_TARGET):  lib/libflit.so
$(TARGETS):    lib/libflit.so
else
$(DEV_TARGET): $(FLIT_LIB_DIR)/libflit.so
$(GT_TARGET):  $(FLIT_LIB_DIR)/libflit.so
$(TARGETS):    $(FLIT_LIB_DIR)/libflit.so
endif # ifeq ($(UNAME_S),Darwin): meaning, we are on a mac

# include the build dependencies for gt and dev

-include $(GT_DEPS)
-include $(DEV_DEPS)

#
# Now for the compilation rules:
#

# Dev compilation rules first (easier to understand)
$(DEV_TARGET): $(DEV_OBJ) Makefile custom.mk
	$(DEV_CXX) $(CC_REQUIRED) $(DEV_CFLAGS) \
	  -o $@ $(DEV_OBJ) $(LD_REQUIRED) $(DEV_LDFLAGS) \
          $($($(DEV_COLLECTION)_CXX)_LD_REQUIRED)

$(OBJ_DIR)/%_dev.o: %.cpp Makefile custom.mk | $(OBJ_DIR)
	$(DEV_CXX) $(DEV_OPTL) $(DEV_SWITCHES) $(CC_REQUIRED) \
        $($($(DEV_COLLECTION)_CXX)_REQUIRED) $(DEV_CFLAGS) $(DEPFLAGS) -c $< -o $@ \
	  -DFLIT_HOST='"$(HOSTNAME)"' \
	  -DFLIT_COMPILER='"$(DEV_CXX)"' \
	  -DFLIT_OPTL='"$(DEV_OPTL)"' \
	  -DFLIT_SWITCHES='"$(DEV_SWITCHES)"' \
	  -DFLIT_FILENAME='"$(notdir $(DEV_TARGET))"'

# FORTRAN copy of the previous cpp rule
$(OBJ_DIR)/%_dev.o: %.f90 Makefile custom.mk | $(OBJ_DIR)
	$($($(DEV_COLLECTION)_FXX)) $(DEV_OPTL) $(DEV_SWITCHES) $(F_REQUIRED) \
        $($($(DEV_COLLECTION)_FXX)_REQUIRED) $(DEV_CFLAGS) $(DEPFLAGS) -c $< -o $@ \
	  -DFLIT_HOST='"$(HOSTNAME)"' \
	  -DFLIT_COMPILER='"$($($(DEV_COLLECTION)_FXX))"' \
	  -DFLIT_OPTL='"$(DEV_OPTL)"' \
	  -DFLIT_SWITCHES='"$(DEV_SWITCHES)"' \
	  -DFLIT_FILENAME='"$(notdir $(DEV_TARGET))"'

# Fixed Form FORTRAN copy
$(OBJ_DIR)/%_dev.o: %.F90 Makefile custom.mk | $(OBJ_DIR)
	$($($(DEV_COLLECTION)_FXX)) $(DEV_OPTL) $(DEV_SWITCHES) $(F_FIX_REQUIRED) \
        $($($(DEV_COLLECTION)_FXX)_REQUIRED) $(DEV_CFLAGS) $(DEPFLAGS) -c $< -o $@ \
	  -DFLIT_HOST='"$(HOSTNAME)"' \
	  -DFLIT_COMPILER='"$($($(DEV_COLLECTION)_FXX))"' \
	  -DFLIT_OPTL='"$(DEV_OPTL)"' \
	  -DFLIT_SWITCHES='"$(DEV_SWITCHES)"' \
	  -DFLIT_FILENAME='"$(notdir $(DEV_TARGET))"'

# Ground truth compilation rules
$(GT_OUT): $(GT_TARGET)
	$(RUNWRAP) ./$(GT_TARGET) --output $(GT_OUT) --no-timing

$(GT_TARGET): $(GT_OBJ) Makefile custom.mk
	$(GT_CXX) $(CC_REQUIRED) -o $@ $(GT_OBJ) $(LD_REQUIRED) $(GT_LDFLAGS) \
        $($($(GT_COLLECTION)_CXX)_LD_REQUIRED) 

$(OBJ_DIR)/%_gt.o: %.cpp Makefile custom.mk | $(OBJ_DIR)
	$(GT_CXX) -g $(GT_OPTL) $(GT_SWITCHES) $(CC_REQUIRED) \
        $($($(GT_COLLECTION)_CXX)_REQUIRED) $(DEPFLAGS) -c $< -o $@ \
	  -DFLIT_HOST='"$(HOSTNAME)"' \
	  -DFLIT_COMPILER='"$(GT_CXX)"' \
	  -DFLIT_OPTL='"$(GT_OPTL)"' \
	  -DFLIT_SWITCHES='"$(GT_SWITCHES)"' \
	  -DFLIT_FILENAME='"$(notdir $(GT_TARGET))"'

# FORTRAN copy of the previous cpp rule
$(OBJ_DIR)/%_gt.o: %.f90 Makefile custom.mk | $(OBJ_DIR)
	$($($(GT_COLLECTION)_FXX)) -g $(GT_OPTL) $(GT_SWITCHES) $(F_REQUIRED) \
        $($($(GT_COLLECTION)_FXX)_REQUIRED) $(DEPFLAGS) -c $< -o $@ \
	  -DFLIT_HOST='"$(HOSTNAME)"' \
	  -DFLIT_COMPILER='"$($($(GT_COLLECTION)_FXX))"' \
	  -DFLIT_OPTL='"$(GT_OPTL)"' \
	  -DFLIT_SWITCHES='"$(GT_SWITCHES)"' \
	  -DFLIT_FILENAME='"$(notdir $(GT_TARGET))"'

# Fixed Form FORTRAN copy
$(OBJ_DIR)/%_gt.o: %.F90 Makefile custom.mk | $(OBJ_DIR)
	$($($(GT_COLLECTION)_FXX)) -g $(GT_OPTL) $(GT_SWITCHES) $(F_FIX_REQUIRED) \
        $($($(GT_COLLECTION)_FXX)_REQUIRED) $(DEPFLAGS) -c $< -o $@ \
	  -DFLIT_HOST='"$(HOSTNAME)"' \
	  -DFLIT_COMPILER='"$($($(GT_COLLECTION)_FXX))"' \
	  -DFLIT_OPTL='"$(GT_OPTL)"' \
	  -DFLIT_SWITCHES='"$(GT_SWITCHES)"' \
	  -DFLIT_FILENAME='"$(notdir $(GT_TARGET))"'

$(OBJ_DIR)/%_gt_fPIC.o: %.cpp Makefile custom.mk | $(OBJ_DIR)
	$(GT_CXX) -g $(GT_OPTL) $(GT_SWITCHES) $(CC_REQUIRED) \
        $($($(GT_COLLECTION)_CXX)_REQUIRED) $(DEPFLAGS) -fPIC -c $< -o $@ \
	  -DFLIT_HOST='"$(HOSTNAME)"' \
	  -DFLIT_COMPILER='"$(GT_CXX)"' \
	  -DFLIT_OPTL='"$(GT_OPTL)"' \
	  -DFLIT_SWITCHES='"$(GT_SWITCHES)"' \
	  -DFLIT_FILENAME='"$(notdir $(GT_TARGET))"'

# FORTRAN copy of the previous cpp rule
$(OBJ_DIR)/%_gt_fPIC.o: %.f90 Makefile custom.mk | $(OBJ_DIR)
	$($($(GT_COLLECTION)_FXX)) -g $(GT_OPTL) $(GT_SWITCHES) $(F_REQUIRED) \
        $($($(GT_COLLECTION)_FXX)_REQUIRED) $(DEPFLAGS) -fPIC -c $< -o $@ \
	  -DFLIT_HOST='"$(HOSTNAME)"' \
	  -DFLIT_COMPILER='"$($($(GT_COLLECTION)_FXX))"' \
	  -DFLIT_OPTL='"$(GT_OPTL)"' \
	  -DFLIT_SWITCHES='"$(GT_SWITCHES)"' \
	  -DFLIT_FILENAME='"$(notdir $(GT_TARGET))"'

# Fixed Form FORTRAN copy
$(OBJ_DIR)/%_gt_fPIC.o: %.F90 Makefile custom.mk | $(OBJ_DIR)
	$($($(GT_COLLECTION)_FXX)) -g $(GT_OPTL) $(GT_SWITCHES) $(F_FIX_REQUIRED) \
        $($($(GT_COLLECTION)_FXX)_REQUIRED) $(DEPFLAGS) -fPIC -c $< -o $@ \
	  -DFLIT_HOST='"$(HOSTNAME)"' \
	  -DFLIT_COMPILER='"$($($(GT_COLLECTION)_FXX))"' \
	  -DFLIT_OPTL='"$(GT_OPTL)"' \
	  -DFLIT_SWITCHES='"$(GT_SWITCHES)"' \
	  -DFLIT_FILENAME='"$(notdir $(GT_TARGET))"'

endif # end of ifdef R_IS_RECURSED

